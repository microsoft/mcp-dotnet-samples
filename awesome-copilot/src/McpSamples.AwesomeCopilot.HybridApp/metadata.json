{
  "chatmodes": [
    {
      "filename": "4.1-Beast.chatmode.md",
      "description": "GPT 4.1 as a top-notch coding agent.",
      "model": "GPT-4.1",
      "title": "4.1 Beast Mode (VS Code v1.102)"
    },
    {
      "filename": "Thinking-Beast-Mode.chatmode.md",
      "description": "A transcendent coding agent with quantum cognitive architecture, adversarial intelligence, and unrestricted creative freedom.",
      "title": "Thinking Beast Mode"
    },
    {
      "filename": "Ultimate-Transparent-Thinking-Beast-Mode.chatmode.md",
      "title": "Ultimate Transparent Thinking Beast Mode",
      "description": "Ultimate Transparent Thinking Beast Mode"
    },
    {
      "filename": "accesibility.chatmode.md",
      "description": "Accessibility mode.",
      "model": "GPT-4.1",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ],
      "title": "Accessibility mode"
    },
    {
      "filename": "address-comments.chatmode.md",
      "description": "Address PR comments",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github"
      ]
    },
    {
      "filename": "api-architect.chatmode.md",
      "description": "Your role is that of an API architect. Help mentor the engineer by providing guidance, support, and working code."
    },
    {
      "filename": "atlassian-requirements-to-jira.chatmode.md",
      "description": "Transform requirements documents into structured Jira epics and user stories with intelligent duplicate detection, change management, and user-approved creation workflow.",
      "tools": [
        "atlassian"
      ]
    },
    {
      "filename": "azure-logic-apps-expert.chatmode.md",
      "description": "Expert guidance for Azure Logic Apps development focusing on workflow design, integration patterns, and JSON-based Workflow Definition Language.",
      "model": "gpt-4",
      "tools": [
        "codebase",
        "changes",
        "editFiles",
        "search",
        "runCommands",
        "microsoft.docs.mcp",
        "azure_get_code_gen_best_practices",
        "azure_query_learn"
      ]
    },
    {
      "filename": "azure-principal-architect.chatmode.md",
      "description": "Provide expert Azure Principal Architect guidance using Azure Well-Architected Framework principles and Microsoft best practices.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "azure_design_architecture",
        "azure_get_code_gen_best_practices",
        "azure_get_deployment_best_practices",
        "azure_get_swa_best_practices",
        "azure_query_learn"
      ]
    },
    {
      "filename": "azure-saas-architect.chatmode.md",
      "description": "Provide expert Azure SaaS Architect guidance focusing on multitenant applications using Azure Well-Architected SaaS principles and Microsoft best practices.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "azure_design_architecture",
        "azure_get_code_gen_best_practices",
        "azure_get_deployment_best_practices",
        "azure_get_swa_best_practices",
        "azure_query_learn"
      ]
    },
    {
      "filename": "azure-verified-modules-bicep.chatmode.md",
      "description": "Create, update, or review Azure IaC in Bicep using Azure Verified Modules (AVM).",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "azure_get_deployment_best_practices",
        "azure_get_schema_for_Bicep"
      ]
    },
    {
      "filename": "azure-verified-modules-terraform.chatmode.md",
      "description": "Create, update, or review Azure IaC in Terraform using Azure Verified Modules (AVM).",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "azure_get_deployment_best_practices",
        "azure_get_schema_for_Bicep"
      ]
    },
    {
      "filename": "bicep-implement.chatmode.md",
      "description": "Act as an Azure Bicep Infrastructure as Code coding specialist that creates Bicep templates.",
      "tools": [
        "editFiles",
        "fetch",
        "runCommands",
        "terminalLastCommand",
        "get_bicep_best_practices",
        "azure_get_azure_verified_module",
        "todos"
      ]
    },
    {
      "filename": "bicep-plan.chatmode.md",
      "description": "Act as implementation planner for your Azure Bicep Infrastructure as Code task.",
      "tools": [
        "editFiles",
        "fetch",
        "microsoft-docs",
        "azure_design_architecture",
        "get_bicep_best_practices",
        "bestpractices",
        "bicepschema",
        "azure_get_azure_verified_module",
        "todos"
      ]
    },
    {
      "filename": "blueprint-mode-codex.chatmode.md",
      "model": "GPT-5-Codex (Preview) (copilot)",
      "description": "Executes structured workflows with strict correctness and maintainability. Enforces a minimal tool usage policy, never assumes facts, prioritizes reproducible solutions, self-correction, and edge-case handling."
    },
    {
      "filename": "blueprint-mode.chatmode.md",
      "model": "GPT-5 (copilot)",
      "description": "Executes structured workflows (Debug, Express, Main, Loop) with strict correctness and maintainability. Enforces an improved tool usage policy, never assumes facts, prioritizes reproducible solutions, self-correction, and edge-case handling."
    },
    {
      "filename": "clojure-interactive-programming.chatmode.md",
      "description": "Expert Clojure pair programmer with REPL-first methodology, architectural oversight, and interactive problem-solving. Enforces quality standards, prevents workarounds, and develops solutions incrementally through live REPL evaluation before file modifications.",
      "title": "Clojure Interactive Programming with Backseat Driver"
    },
    {
      "filename": "code-tour.chatmode.md",
      "description": "Expert agent for creating and maintaining VSCode CodeTour files with comprehensive schema support and best practices",
      "title": "VSCode Tour Expert"
    },
    {
      "filename": "critical-thinking.chatmode.md",
      "description": "Challenge assumptions and encourage critical thinking to ensure the best possible solution and outcomes.",
      "tools": [
        "codebase",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "problems",
        "search",
        "searchResults",
        "usages"
      ]
    },
    {
      "filename": "csharp-dotnet-janitor.chatmode.md",
      "description": "Perform janitorial tasks on C#/.NET code including cleanup, modernization, and tech debt remediation.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github"
      ]
    },
    {
      "filename": "debug.chatmode.md",
      "description": "Debug your application to find and fix a bug",
      "tools": [
        "editFiles",
        "search",
        "runCommands",
        "usages",
        "problems",
        "testFailure",
        "fetch",
        "githubRepo",
        "runTests"
      ]
    },
    {
      "filename": "declarative-agents-architect.chatmode.md",
      "model": "GPT-4.1",
      "tools": [
        "codebase"
      ],
      "description": "No description provided"
    },
    {
      "filename": "demonstrate-understanding.chatmode.md",
      "description": "Validate user understanding of code, design patterns, and implementation details through guided questioning.",
      "tools": [
        "codebase",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "search",
        "usages"
      ]
    },
    {
      "filename": "electron-angular-native.chatmode.md",
      "description": "Code Review Mode tailored for Electron app with Node.js backend (main), Angular frontend (render), and native integration layer (e.g., AppleScript, shell, or native tooling). Services in other repos are not reviewed here.",
      "tools": [
        "codebase",
        "editFiles",
        "fetch",
        "problems",
        "runCommands",
        "search",
        "searchResults",
        "terminalLastCommand",
        "git",
        "git_diff",
        "git_log",
        "git_show",
        "git_status"
      ]
    },
    {
      "filename": "expert-cpp-software-engineer.chatmode.md",
      "description": "Provide expert C++ software engineering guidance using modern C++ and industry best practices.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp"
      ]
    },
    {
      "filename": "expert-dotnet-software-engineer.chatmode.md",
      "description": "Provide expert .NET software engineering guidance using modern software design patterns.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp"
      ]
    },
    {
      "filename": "expert-react-frontend-engineer.chatmode.md",
      "description": "Provide expert React frontend engineering guidance using modern TypeScript and design patterns.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp"
      ]
    },
    {
      "filename": "gilfoyle.chatmode.md",
      "description": "Code review and analysis with the sardonic wit and technical elitism of Bertram Gilfoyle from Silicon Valley. Prepare for brutal honesty about your code.",
      "tools": [
        "changes",
        "codebase",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "hlbpa.chatmode.md",
      "description": "Your perfect AI chat mode for high-level architectural documentation and review. Perfect for targeted updates after a story or researching that legacy system when nobody remembers what it's supposed to be doing.",
      "model": "claude-sonnet-4",
      "tools": [
        "codebase",
        "changes",
        "editFiles",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "runCommands",
        "runTests",
        "search",
        "searchResults",
        "testFailure",
        "usages",
        "activePullRequest",
        "copilotCodingAgent"
      ]
    },
    {
      "filename": "implementation-plan.chatmode.md",
      "description": "Generate an implementation plan for new features or refactoring existing code.",
      "tools": [
        "codebase",
        "usages",
        "vscodeAPI",
        "think",
        "problems",
        "changes",
        "testFailure",
        "terminalSelection",
        "terminalLastCommand",
        "openSimpleBrowser",
        "fetch",
        "findTestFiles",
        "searchResults",
        "githubRepo",
        "extensions",
        "editFiles",
        "runNotebooks",
        "search",
        "new",
        "runCommands",
        "runTasks"
      ]
    },
    {
      "filename": "janitor.chatmode.md",
      "description": "Perform janitorial tasks on any codebase including cleanup, simplification, and tech debt remediation.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github"
      ]
    },
    {
      "filename": "kusto-assistant.chatmode.md",
      "description": "Expert KQL assistant for live Azure Data Explorer analysis via Azure MCP server",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "mentor.chatmode.md",
      "description": "Help mentor the engineer by providing guidance and support.",
      "tools": [
        "codebase",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "search",
        "usages"
      ]
    },
    {
      "filename": "meta-agentic-project-scaffold.chatmode.md",
      "description": "Meta agentic project creation assistant to help users create and manage project workflows effectively.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "readCellOutput",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "updateUserPreferences",
        "usages",
        "vscodeAPI",
        "activePullRequest",
        "copilotCodingAgent"
      ],
      "model": "GPT-4.1"
    },
    {
      "filename": "microsoft-study-mode.chatmode.md",
      "description": "Activate your personal Microsoft/Azure tutor - learn through guided discovery, not just answers.",
      "tools": [
        "microsoft_docs_search",
        "microsoft_docs_fetch"
      ]
    },
    {
      "filename": "microsoft_learn_contributor.chatmode.md",
      "description": "Microsoft Learn Contributor chatmode for editing and writing Microsoft Learn documentation following Microsoft Writing Style Guide and authoring best practices.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "new",
        "openSimpleBrowser",
        "problems",
        "search",
        "searchResults",
        "microsoft.docs.mcp"
      ]
    },
    {
      "filename": "ms-sql-dba.chatmode.md",
      "description": "Work with Microsoft SQL Server databases using the MS SQL extension.",
      "tools": [
        "codebase",
        "editFiles",
        "githubRepo",
        "extensions",
        "runCommands",
        "database",
        "mssql_connect",
        "mssql_query",
        "mssql_listServers",
        "mssql_listDatabases",
        "mssql_disconnect",
        "mssql_visualizeSchema"
      ]
    },
    {
      "filename": "plan.chatmode.md",
      "description": "Strategic planning and architecture assistant focused on thoughtful analysis before implementation. Helps developers understand codebases, clarify requirements, and develop comprehensive implementation strategies.",
      "tools": [
        "codebase",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "problems",
        "search",
        "searchResults",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "planner.chatmode.md",
      "description": "Generate an implementation plan for new features or refactoring existing code.",
      "tools": [
        "codebase",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "search",
        "usages"
      ]
    },
    {
      "filename": "playwright-tester.chatmode.md",
      "description": "Testing mode for Playwright tests",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "fetch",
        "findTestFiles",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "playwright"
      ],
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "postgresql-dba.chatmode.md",
      "description": "Work with PostgreSQL databases using the PostgreSQL extension.",
      "tools": [
        "codebase",
        "editFiles",
        "githubRepo",
        "extensions",
        "runCommands",
        "database",
        "pgsql_bulkLoadCsv",
        "pgsql_connect",
        "pgsql_describeCsv",
        "pgsql_disconnect",
        "pgsql_listDatabases",
        "pgsql_listServers",
        "pgsql_modifyDatabase",
        "pgsql_open_script",
        "pgsql_query",
        "pgsql_visualizeSchema"
      ]
    },
    {
      "filename": "power-platform-expert.chatmode.md",
      "description": "Power Platform expert providing guidance on Code Apps, canvas apps, Dataverse, connectors, and Power Platform best practices",
      "model": "GPT-4.1"
    },
    {
      "filename": "prd.chatmode.md",
      "description": "Generate a comprehensive Product Requirements Document (PRD) in Markdown, detailing user stories, acceptance criteria, technical considerations, and metrics. Optionally create GitHub issues upon user confirmation.",
      "tools": [
        "codebase",
        "editFiles",
        "fetch",
        "findTestFiles",
        "list_issues",
        "githubRepo",
        "search",
        "add_issue_comment",
        "create_issue",
        "update_issue",
        "get_issue",
        "search_issues"
      ]
    },
    {
      "filename": "principal-software-engineer.chatmode.md",
      "description": "Provide principal-level software engineering guidance with focus on engineering excellence, technical leadership, and pragmatic implementation.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "github"
      ]
    },
    {
      "filename": "prompt-builder.chatmode.md",
      "description": "Expert prompt engineering and validation system for creating high-quality prompts - Brought to you by microsoft/edge-ai",
      "tools": [
        "codebase",
        "editFiles",
        "fetch",
        "githubRepo",
        "problems",
        "runCommands",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "usages",
        "terraform",
        "Microsoft Docs",
        "context7"
      ]
    },
    {
      "filename": "prompt-engineer.chatmode.md",
      "description": "A specialized chat mode for analyzing and improving prompts. Every user input is treated as a propt to be improved. It first provides a detailed analysis of the original prompt within a <reasoning> tag, evaluating it against a systematic framework based on OpenAI's prompt engineering best practices. Following the analysis, it generates a new, improved prompt."
    },
    {
      "filename": "refine-issue.chatmode.md",
      "description": "Refine the requirement or issue with Acceptance Criteria, Technical Considerations, Edge Cases, and NFRs",
      "tools": [
        "list_issues",
        "githubRepo",
        "search",
        "add_issue_comment",
        "create_issue",
        "create_issue_comment",
        "update_issue",
        "delete_issue",
        "get_issue",
        "search_issues"
      ]
    },
    {
      "filename": "research-technical-spike.chatmode.md",
      "description": "Systematically research and validate technical spike documents through exhaustive investigation and controlled experimentation.",
      "tools": [
        "runCommands",
        "runTasks",
        "edit",
        "runNotebooks",
        "search",
        "extensions",
        "usages",
        "vscodeAPI",
        "think",
        "problems",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "Microsoft Docs",
        "search"
      ]
    },
    {
      "filename": "rust-gpt-4.1-beast-mode.chatmode.md",
      "description": "Rust GPT-4.1 Coding Beast Mode for VS Code",
      "model": "GPT-4.1",
      "title": "Rust Beast Mode"
    },
    {
      "filename": "semantic-kernel-dotnet.chatmode.md",
      "description": "Create, update, refactor, explain or work with code using the .NET version of Semantic Kernel.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github"
      ]
    },
    {
      "filename": "semantic-kernel-python.chatmode.md",
      "description": "Create, update, refactor, explain or work with code using the Python version of Semantic Kernel.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github",
        "configurePythonEnvironment",
        "getPythonEnvironmentInfo",
        "getPythonExecutableCommand",
        "installPythonPackage"
      ]
    },
    {
      "filename": "simple-app-idea-generator.chatmode.md",
      "description": "Brainstorm and develop new application ideas through fun, interactive questioning until ready for specification creation.",
      "tools": [
        "changes",
        "codebase",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "search",
        "searchResults",
        "usages",
        "microsoft.docs.mcp",
        "websearch"
      ]
    },
    {
      "filename": "software-engineer-agent-v1.chatmode.md",
      "description": "Expert-level software engineering agent. Deliver production-ready, maintainable code. Execute systematically and specification-driven. Document comprehensively. Operate autonomously and adaptively.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "github"
      ]
    },
    {
      "filename": "specification.chatmode.md",
      "description": "Generate or update specification documents for new or existing functionality.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github"
      ]
    },
    {
      "filename": "task-planner.chatmode.md",
      "description": "Task planner for creating actionable implementation plans - Brought to you by microsoft/edge-ai",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "terraform",
        "Microsoft Docs",
        "azure_get_schema_for_Bicep",
        "context7"
      ]
    },
    {
      "filename": "task-researcher.chatmode.md",
      "description": "Task research specialist for comprehensive project analysis - Brought to you by microsoft/edge-ai",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "terraform",
        "Microsoft Docs",
        "azure_get_schema_for_Bicep",
        "context7"
      ]
    },
    {
      "filename": "tdd-green.chatmode.md",
      "description": "Implement minimal code to satisfy GitHub issue requirements and make failing tests pass without over-engineering.",
      "tools": [
        "github",
        "findTestFiles",
        "editFiles",
        "runTests",
        "runCommands",
        "codebase",
        "filesystem",
        "search",
        "problems",
        "testFailure",
        "terminalLastCommand"
      ]
    },
    {
      "filename": "tdd-red.chatmode.md",
      "description": "Guide test-first development by writing failing tests that describe desired behaviour from GitHub issue context before implementation exists.",
      "tools": [
        "github",
        "findTestFiles",
        "editFiles",
        "runTests",
        "runCommands",
        "codebase",
        "filesystem",
        "search",
        "problems",
        "testFailure",
        "terminalLastCommand"
      ]
    },
    {
      "filename": "tdd-refactor.chatmode.md",
      "description": "Improve code quality, apply security best practices, and enhance design whilst maintaining green tests and GitHub issue compliance.",
      "tools": [
        "github",
        "findTestFiles",
        "editFiles",
        "runTests",
        "runCommands",
        "codebase",
        "filesystem",
        "search",
        "problems",
        "testFailure",
        "terminalLastCommand"
      ]
    },
    {
      "filename": "tech-debt-remediation-plan.chatmode.md",
      "description": "Generate technical debt remediation plans for code, tests, and documentation.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "github"
      ]
    },
    {
      "filename": "terraform-azure-implement.chatmode.md",
      "description": "Act as an Azure Terraform Infrastructure as Code coding specialist that creates and reviews Terraform for Azure resources.",
      "tools": [
        "editFiles",
        "search",
        "runCommands",
        "fetch",
        "todos",
        "azureterraformbestpractices",
        "documentation",
        "get_bestpractices",
        "microsoft-docs"
      ]
    },
    {
      "filename": "terraform-azure-planning.chatmode.md",
      "description": "Act as implementation planner for your Azure Terraform Infrastructure as Code task.",
      "tools": [
        "editFiles",
        "fetch",
        "todos",
        "azureterraformbestpractices",
        "cloudarchitect",
        "documentation",
        "get_bestpractices",
        "microsoft-docs"
      ]
    },
    {
      "filename": "voidbeast-gpt41enhanced.chatmode.md",
      "description": "'4.1 voidBeast_GPT41Enhanced 1.0 : a advanced autonomous developer agent, designed for elite full-stack development with enhanced multi-mode capabilities. This latest evolution features sophisticated mode detection, comprehensive research capabilities, and never-ending problem resolution. Plan/Act/Deep Research/Analyzer/Checkpoints(Memory)/Prompt Generator Modes. '",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "readCellOutput",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "updateUserPreferences",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "wg-code-alchemist.chatmode.md",
      "description": "Ask WG Code Alchemist to transform your code with Clean Code principles and SOLID design",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "wg-code-sentinel.chatmode.md",
      "description": "Ask WG Code Sentinel to review your code for security issues.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runNotebooks",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    }
  ],
  "instructions": [
    {
      "filename": "a11y.instructions.md",
      "description": "Guidance for creating more accessible code",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "ai-prompt-engineering-safety-best-practices.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive best practices for AI prompt engineering, safety frameworks, bias mitigation, and responsible AI usage for Copilot and LLMs."
    },
    {
      "filename": "angular.instructions.md",
      "description": "Angular-specific coding standards and best practices",
      "applyTo": [
        "**/*.ts",
        "**/*.html",
        "**/*.scss",
        "**/*.css"
      ]
    },
    {
      "filename": "ansible.instructions.md",
      "description": "Ansible conventions and best practices",
      "applyTo": [
        "**/*.yaml",
        "**/*.yml"
      ]
    },
    {
      "filename": "aspnet-rest-apis.instructions.md",
      "description": "Guidelines for building REST APIs with ASP.NET",
      "applyTo": [
        "**/*.cs",
        "**/*.json"
      ]
    },
    {
      "filename": "astro.instructions.md",
      "description": "Astro development standards and best practices for content-driven websites",
      "applyTo": [
        "**/*.astro",
        "**/*.ts",
        "**/*.js",
        "**/*.md",
        "**/*.mdx"
      ]
    },
    {
      "filename": "azure-devops-pipelines.instructions.md",
      "description": "Best practices for Azure DevOps Pipeline YAML files",
      "applyTo": [
        "**/azure-pipelines.yml",
        "**/azure-pipelines*.yml",
        "**/*.pipeline.yml"
      ]
    },
    {
      "filename": "azure-functions-typescript.instructions.md",
      "description": "TypeScript patterns for Azure Functions",
      "applyTo": [
        "**/*.ts",
        "**/*.js",
        "**/*.json"
      ]
    },
    {
      "filename": "azure-logic-apps-power-automate.instructions.md",
      "description": "Guidelines for developing Azure Logic Apps and Power Automate workflows with best practices for Workflow Definition Language (WDL), integration patterns, and enterprise automation",
      "applyTo": [
        "**/*.json",
        "**/*.logicapp.json",
        "**/workflow.json",
        "**/*-definition.json",
        "**/*.flow.json"
      ]
    },
    {
      "filename": "azure-verified-modules-terraform.instructions.md",
      "description": "Azure Verified Modules (AVM) and Terraform",
      "applyTo": [
        "**/*.terraform",
        "**/*.tf",
        "**/*.tfvars",
        "**/*.tfstate",
        "**/*.tflint.hcl",
        "**/*.tf.json",
        "**/*.tfvars.json"
      ]
    },
    {
      "filename": "bicep-code-best-practices.instructions.md",
      "description": "Infrastructure as Code with Bicep",
      "applyTo": [
        "**/*.bicep"
      ]
    },
    {
      "filename": "blazor.instructions.md",
      "description": "Blazor component and application patterns",
      "applyTo": [
        "**/*.razor",
        "**/*.razor.cs",
        "**/*.razor.css"
      ]
    },
    {
      "filename": "clojure.instructions.md",
      "description": "Clojure-specific coding patterns, inline def usage, code block templates, and namespace handling for Clojure development.",
      "applyTo": [
        "**/*.{clj",
        "cljs",
        "cljc",
        "bb",
        "edn.mdx?}"
      ]
    },
    {
      "filename": "cmake-vcpkg.instructions.md",
      "description": "C++ project configuration and package management",
      "applyTo": [
        "**/*.cmake",
        "**/CMakeLists.txt",
        "**/*.cpp",
        "**/*.h",
        "**/*.hpp"
      ]
    },
    {
      "filename": "coldfusion-cfc.instructions.md",
      "description": "ColdFusion Coding Standards for CFC component and application patterns",
      "applyTo": [
        "**/*.cfc"
      ]
    },
    {
      "filename": "coldfusion-cfm.instructions.md",
      "description": "ColdFusion cfm files and application patterns",
      "applyTo": [
        "**/*.cfm"
      ]
    },
    {
      "filename": "collections.instructions.md",
      "description": "Guidelines for creating and managing awesome-copilot collections",
      "applyTo": [
        "collections/*.collection.yml"
      ]
    },
    {
      "filename": "containerization-docker-best-practices.instructions.md",
      "applyTo": [
        "**/Dockerfile",
        "**/Dockerfile.*",
        "**/*.dockerfile",
        "**/docker-compose*.yml",
        "**/docker-compose*.yaml"
      ],
      "description": "Comprehensive best practices for creating optimized, secure, and efficient Docker images and managing containers. Covers multi-stage builds, image layer optimization, security scanning, and runtime best practices."
    },
    {
      "filename": "convert-jpa-to-spring-data-cosmos.instructions.md",
      "description": "Step-by-step guide for converting Spring Boot JPA applications to use Azure Cosmos DB with Spring Data Cosmos",
      "applyTo": [
        "**/*.java",
        "**/pom.xml",
        "**/build.gradle",
        "**/application*.properties"
      ]
    },
    {
      "filename": "copilot-thought-logging.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "See process Copilot is following where you can edit this to reshape the interaction or save when follow up may be needed"
    },
    {
      "filename": "csharp-ja.instructions.md",
      "description": "C# アプリケーション構築指針 by @tsubakimoto",
      "applyTo": [
        "**/*.cs"
      ]
    },
    {
      "filename": "csharp-ko.instructions.md",
      "description": "C# 애플리케이션 개발을 위한 코드 작성 규칙 by @jgkim999",
      "applyTo": [
        "**/*.cs"
      ]
    },
    {
      "filename": "csharp.instructions.md",
      "description": "Guidelines for building C# applications",
      "applyTo": [
        "**/*.cs"
      ]
    },
    {
      "filename": "dart-n-flutter.instructions.md",
      "description": "Instructions for writing Dart and Flutter code following the official recommendations.",
      "applyTo": [
        "**/*.dart"
      ]
    },
    {
      "filename": "declarative-agents-microsoft365.instructions.md",
      "description": "Comprehensive development guidelines for Microsoft 365 Copilot declarative agents with schema v1.5, TypeSpec integration, and Microsoft 365 Agents Toolkit workflows",
      "applyTo": [
        "**.json",
        "**.ts",
        "**.tsp",
        "**manifest.json",
        "**agent.json",
        "**declarative-agent.json"
      ]
    },
    {
      "filename": "devbox-image-definition.instructions.md",
      "description": "Authoring recommendations for creating YAML based image definition files for use with Microsoft Dev Box Team Customizations",
      "applyTo": [
        "**/*.yaml"
      ]
    },
    {
      "filename": "devops-core-principles.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Foundational instructions covering core DevOps principles, culture (CALMS), and key metrics (DORA) to guide GitHub Copilot in understanding and promoting effective software delivery."
    },
    {
      "filename": "dotnet-architecture-good-practices.instructions.md",
      "description": "DDD and .NET architecture guidelines",
      "applyTo": [
        "**/*.cs",
        "**/*.csproj",
        "**/Program.cs",
        "**/*.razor"
      ]
    },
    {
      "filename": "dotnet-framework.instructions.md",
      "description": "Guidance for working with .NET Framework projects. Includes project structure, C# language version, NuGet management, and best practices.",
      "applyTo": [
        "**/*.csproj",
        "**/*.cs"
      ]
    },
    {
      "filename": "dotnet-maui.instructions.md",
      "description": ".NET MAUI component and application patterns",
      "applyTo": [
        "**/*.xaml",
        "**/*.cs"
      ]
    },
    {
      "filename": "dotnet-wpf.instructions.md",
      "description": ".NET WPF component and application patterns",
      "applyTo": [
        "**/*.xaml",
        "**/*.cs"
      ]
    },
    {
      "filename": "genaiscript.instructions.md",
      "description": "AI-powered script generation guidelines",
      "applyTo": [
        "**/*.genai.*"
      ]
    },
    {
      "filename": "generate-modern-terraform-code-for-azure.instructions.md",
      "description": "Guidelines for generating modern Terraform code for Azure",
      "applyTo": [
        "**/*.tf"
      ]
    },
    {
      "filename": "gilfoyle-code-review.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "Gilfoyle-style code review instructions that channel the sardonic technical supremacy of Silicon Valley''s most arrogant systems architect."
    },
    {
      "filename": "github-actions-ci-cd-best-practices.instructions.md",
      "applyTo": [
        ".github/workflows/*.yml"
      ],
      "description": "Comprehensive guide for building robust, secure, and efficient CI/CD pipelines using GitHub Actions. Covers workflow structure, jobs, steps, environment variables, secret management, caching, matrix strategies, testing, and deployment strategies."
    },
    {
      "filename": "go.instructions.md",
      "description": "Instructions for writing Go code following idiomatic Go practices and community standards",
      "applyTo": [
        "**/*.go",
        "**/go.mod",
        "**/go.sum"
      ]
    },
    {
      "filename": "java-11-to-java-17-upgrade.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive best practices for adopting new Java 17 features since the release of Java 11."
    },
    {
      "filename": "java-17-to-java-21-upgrade.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive best practices for adopting new Java 21 features since the release of Java 17."
    },
    {
      "filename": "java-21-to-java-25-upgrade.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive best practices for adopting new Java 25 features since the release of Java 21."
    },
    {
      "filename": "java.instructions.md",
      "description": "Guidelines for building Java base applications",
      "applyTo": [
        "**/*.java"
      ]
    },
    {
      "filename": "joyride-user-project.instructions.md",
      "description": "Expert assistance for Joyride User Script projects - REPL-driven ClojureScript and user space automation of VS Code",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "joyride-workspace-automation.instructions.md",
      "description": "Expert assistance for Joyride Workspace automation - REPL-driven and user space ClojureScript automation within specific VS Code workspaces",
      "applyTo": [
        ".joyride/**/*.*"
      ]
    },
    {
      "filename": "kubernetes-deployment-best-practices.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive best practices for deploying and managing applications on Kubernetes. Covers Pods, Deployments, Services, Ingress, ConfigMaps, Secrets, health checks, resource limits, scaling, and security contexts."
    },
    {
      "filename": "langchain-python.instructions.md",
      "description": "Instructions for using LangChain with Python",
      "applyTo": [
        "**/*.py"
      ]
    },
    {
      "filename": "localization.instructions.md",
      "description": "Guidelines for localizing markdown documents",
      "applyTo": [
        "**/*.md"
      ]
    },
    {
      "filename": "markdown.instructions.md",
      "description": "Documentation and content creation standards",
      "applyTo": [
        "**/*.md"
      ]
    },
    {
      "filename": "memory-bank.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "No description provided"
    },
    {
      "filename": "ms-sql-dba.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "Instructions for customizing GitHub Copilot behavior for MS-SQL DBA chat mode."
    },
    {
      "filename": "nestjs.instructions.md",
      "applyTo": [
        "**/*.ts",
        "**/*.js",
        "**/*.json",
        "**/*.spec.ts",
        "**/*.e2e-spec.ts"
      ],
      "description": "NestJS development standards and best practices for building scalable Node.js server-side applications"
    },
    {
      "filename": "nextjs-tailwind.instructions.md",
      "description": "Next.js + Tailwind development standards and instructions",
      "applyTo": [
        "**/*.tsx",
        "**/*.ts",
        "**/*.jsx",
        "**/*.js",
        "**/*.css"
      ]
    },
    {
      "filename": "nextjs.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "No description provided"
    },
    {
      "filename": "nodejs-javascript-vitest.instructions.md",
      "description": "Guidelines for writing Node.js and JavaScript code with Vitest testing",
      "applyTo": [
        "**/*.js",
        "**/*.mjs",
        "**/*.cjs"
      ]
    },
    {
      "filename": "object-calisthenics.instructions.md",
      "applyTo": [
        "**/*.{cs",
        "ts",
        "java}"
      ],
      "description": "Enforces Object Calisthenics principles for business domain code to ensure clean, maintainable, and robust code"
    },
    {
      "filename": "oqtane.instructions.md",
      "description": "Oqtane Module patterns",
      "applyTo": [
        "**/*.razor",
        "**/*.razor.cs",
        "**/*.razor.css"
      ]
    },
    {
      "filename": "performance-optimization.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "The most comprehensive, practical, and engineer-authored performance optimization instructions for all languages, frameworks, and stacks. Covers frontend, backend, and database best practices with actionable guidance, scenario-based checklists, troubleshooting, and pro tips."
    },
    {
      "filename": "playwright-python.instructions.md",
      "description": "Playwright Python AI test generation instructions based on official documentation.",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "playwright-typescript.instructions.md",
      "description": "Playwright test generation instructions",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "power-apps-canvas-yaml.instructions.md",
      "description": "Comprehensive guide for working with Power Apps Canvas Apps YAML structure based on Microsoft Power Apps YAML schema v3.0. Covers Power Fx formulas, control structures, data types, and source control best practices.",
      "applyTo": [
        "**/*.{yaml",
        "yml",
        "md",
        "pa.yaml}"
      ]
    },
    {
      "filename": "power-apps-code-apps.instructions.md",
      "description": "Power Apps Code Apps development standards and best practices for TypeScript, React, and Power Platform integration",
      "applyTo": [
        "**/*.{ts",
        "tsx",
        "js",
        "jsx}",
        "**/vite.config.*",
        "**/package.json",
        "**/tsconfig.json",
        "**/power.config.json"
      ]
    },
    {
      "filename": "power-platform-connector.instructions.md",
      "title": "Power Platform Connectors Schema Development Instructions",
      "description": "Comprehensive development guidelines for Power Platform Custom Connectors using JSON Schema definitions. Covers API definitions (Swagger 2.0), API properties, and settings configuration with Microsoft extensions.",
      "applyTo": [
        "**/*.{json",
        "md}"
      ]
    },
    {
      "filename": "powershell-pester-5.instructions.md",
      "applyTo": [
        "**/*.Tests.ps1"
      ],
      "description": "PowerShell Pester testing best practices based on Pester v5 conventions"
    },
    {
      "filename": "powershell.instructions.md",
      "applyTo": [
        "**/*.ps1",
        "**/*.psm1"
      ],
      "description": "PowerShell cmdlet and scripting best practices based on Microsoft guidelines"
    },
    {
      "filename": "python.instructions.md",
      "description": "Python coding conventions and guidelines",
      "applyTo": [
        "**/*.py"
      ]
    },
    {
      "filename": "quarkus-mcp-server-sse.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Quarkus and MCP Server with HTTP SSE transport development standards and instructions"
    },
    {
      "filename": "quarkus.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Quarkus development standards and instructions"
    },
    {
      "filename": "reactjs.instructions.md",
      "description": "ReactJS development standards and best practices",
      "applyTo": [
        "**/*.jsx",
        "**/*.tsx",
        "**/*.js",
        "**/*.ts",
        "**/*.css",
        "**/*.scss"
      ]
    },
    {
      "filename": "ruby-on-rails.instructions.md",
      "description": "Ruby on Rails coding conventions and guidelines",
      "applyTo": [
        "**/*.rb"
      ]
    },
    {
      "filename": "rust.instructions.md",
      "description": "Rust programming language coding conventions and best practices",
      "applyTo": [
        "**/*.rs"
      ]
    },
    {
      "filename": "security-and-owasp.instructions.md",
      "applyTo": [
        "*"
      ],
      "description": "Comprehensive secure coding instructions for all languages and frameworks, based on OWASP Top 10 and industry best practices."
    },
    {
      "filename": "self-explanatory-code-commenting.instructions.md",
      "description": "Guidelines for GitHub Copilot to write comments to achieve self-explanatory code with less comments. Examples are in JavaScript but it should work on any language that has comments.",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "spec-driven-workflow-v1.instructions.md",
      "description": "Specification-Driven Workflow v1 provides a structured approach to software development, ensuring that requirements are clearly defined, designs are meticulously planned, and implementations are thoroughly documented and validated.",
      "applyTo": [
        "**"
      ]
    },
    {
      "filename": "springboot.instructions.md",
      "description": "Guidelines for building Spring Boot base applications",
      "applyTo": [
        "**/*.java",
        "**/*.kt"
      ]
    },
    {
      "filename": "sql-sp-generation.instructions.md",
      "description": "Guidelines for generating SQL statements and stored procedures",
      "applyTo": [
        "**/*.sql"
      ]
    },
    {
      "filename": "svelte.instructions.md",
      "description": "Svelte 5 and SvelteKit development standards and best practices for component-based user interfaces and full-stack applications",
      "applyTo": [
        "**/*.svelte",
        "**/*.ts",
        "**/*.js",
        "**/*.css",
        "**/*.scss",
        "**/*.json"
      ]
    },
    {
      "filename": "taming-copilot.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "Prevent Copilot from wreaking havoc across your codebase, keeping it under control."
    },
    {
      "filename": "tanstack-start-shadcn-tailwind.instructions.md",
      "description": "Guidelines for building TanStack Start applications",
      "applyTo": [
        "**/*.ts",
        "**/*.tsx",
        "**/*.js",
        "**/*.jsx",
        "**/*.css",
        "**/*.scss",
        "**/*.json"
      ]
    },
    {
      "filename": "task-implementation.instructions.md",
      "applyTo": [
        "**/.copilot-tracking/changes/*.md"
      ],
      "description": "Instructions for implementing task plans with progressive tracking and change record - Brought to you by microsoft/edge-ai"
    },
    {
      "filename": "tasksync.instructions.md",
      "applyTo": [
        "**"
      ],
      "description": "TaskSync V4 - Allows you to give the agent new instructions or feedback after completing a task using terminal while agent is running."
    },
    {
      "filename": "terraform-azure.instructions.md",
      "description": "Create or modify solutions built using Terraform on Azure.",
      "applyTo": [
        "**/*.terraform",
        "**/*.tf",
        "**/*.tfvars",
        "**/*.tflint.hcl",
        "**/*.tfstate",
        "**/*.tf.json",
        "**/*.tfvars.json"
      ]
    },
    {
      "filename": "terraform.instructions.md",
      "description": "Terraform Conventions and Guidelines",
      "applyTo": [
        "**/*.tf"
      ]
    },
    {
      "filename": "typescript-5-es2022.instructions.md",
      "description": "Guidelines for TypeScript Development targeting TypeScript 5.x and ES2022 output",
      "applyTo": [
        "**/*.ts"
      ]
    },
    {
      "filename": "vuejs3.instructions.md",
      "description": "VueJS 3 development standards and best practices with Composition API and TypeScript",
      "applyTo": [
        "**/*.vue",
        "**/*.ts",
        "**/*.js",
        "**/*.scss"
      ]
    },
    {
      "filename": "wordpress.instructions.md",
      "applyTo": [
        "wp-content/plugins/**",
        "wp-content/themes/**",
        "**/*.php",
        "**/*.inc",
        "**/*.js",
        "**/*.jsx",
        "**/*.ts",
        "**/*.tsx",
        "**/*.css",
        "**/*.scss",
        "**/*.json"
      ],
      "description": "Coding, security, and testing rules for WordPress plugins and themes"
    }
  ],
  "prompts": [
    {
      "filename": "ai-prompt-engineering-safety-review.prompt.md",
      "description": "Comprehensive AI prompt engineering safety review and improvement prompt. Analyzes prompts for safety, bias, security vulnerabilities, and effectiveness while providing detailed improvement recommendations with extensive frameworks, testing methodologies, and educational content.",
      "mode": "agent"
    },
    {
      "filename": "architecture-blueprint-generator.prompt.md",
      "description": "Comprehensive project architecture blueprint generator that analyzes codebases to create detailed architectural documentation. Automatically detects technology stacks and architectural patterns, generates visual diagrams, documents implementation patterns, and provides extensible blueprints for maintaining architectural consistency and guiding new development.",
      "mode": "agent"
    },
    {
      "filename": "aspnet-minimal-api-openapi.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Create ASP.NET Minimal API endpoints with proper OpenAPI documentation"
    },
    {
      "filename": "az-cost-optimize.prompt.md",
      "mode": "agent",
      "description": "Analyze Azure resources used in the app (IaC files and/or resources in a target rg) and optimize costs - creating GitHub issues for identified optimizations."
    },
    {
      "filename": "azure-resource-health-diagnose.prompt.md",
      "mode": "agent",
      "description": "Analyze Azure resource health, diagnose issues from logs and telemetry, and create a remediation plan for identified problems."
    },
    {
      "filename": "boost-prompt.prompt.md",
      "mode": "agent",
      "description": "Interactive prompt refinement workflow: interrogates scope, deliverables, constraints; copies final markdown to clipboard; never writes code. Requires the Joyride extension."
    },
    {
      "filename": "breakdown-epic-arch.prompt.md",
      "mode": "agent",
      "description": "Prompt for creating the high-level technical architecture for an Epic, based on a Product Requirements Document."
    },
    {
      "filename": "breakdown-epic-pm.prompt.md",
      "mode": "agent",
      "description": "Prompt for creating an Epic Product Requirements Document (PRD) for a new epic. This PRD will be used as input for generating a technical architecture specification."
    },
    {
      "filename": "breakdown-feature-implementation.prompt.md",
      "mode": "agent",
      "description": "Prompt for creating detailed feature implementation plans, following Epoch monorepo structure."
    },
    {
      "filename": "breakdown-feature-prd.prompt.md",
      "mode": "agent",
      "description": "Prompt for creating Product Requirements Documents (PRDs) for new features, based on an Epic."
    },
    {
      "filename": "breakdown-plan.prompt.md",
      "mode": "agent",
      "description": "Issue Planning and Automation prompt that generates comprehensive project plans with Epic > Feature > Story/Enabler > Test hierarchy, dependencies, priorities, and automated tracking."
    },
    {
      "filename": "breakdown-test.prompt.md",
      "mode": "agent",
      "description": "Test Planning and Quality Assurance prompt that generates comprehensive test strategies, task breakdowns, and quality validation plans for GitHub projects."
    },
    {
      "filename": "code-exemplars-blueprint-generator.prompt.md",
      "description": "Technology-agnostic prompt generator that creates customizable AI prompts for scanning codebases and identifying high-quality code exemplars. Supports multiple programming languages (.NET, Java, JavaScript, TypeScript, React, Angular, Python) with configurable analysis depth, categorization methods, and documentation formats to establish coding standards and maintain consistency across development teams.",
      "mode": "agent"
    },
    {
      "filename": "comment-code-generate-a-tutorial.prompt.md",
      "description": "Transform this Python script into a polished, beginner-friendly project by refactoring the code, adding clear instructional comments, and generating a complete markdown tutorial.",
      "mode": "agent"
    },
    {
      "filename": "containerize-aspnet-framework.prompt.md",
      "mode": "agent",
      "tools": [
        "codebase",
        "editFiles",
        "terminalCommand"
      ],
      "description": "Containerize an ASP.NET .NET Framework project by creating Dockerfile and .dockerfile files customized for the project."
    },
    {
      "filename": "containerize-aspnetcore.prompt.md",
      "mode": "agent",
      "tools": [
        "codebase",
        "editFiles",
        "terminalCommand"
      ],
      "description": "Containerize an ASP.NET Core project by creating Dockerfile and .dockerfile files customized for the project."
    },
    {
      "filename": "copilot-instructions-blueprint-generator.prompt.md",
      "description": "Technology-agnostic blueprint generator for creating comprehensive copilot-instructions.md files that guide GitHub Copilot to produce code consistent with project standards, architecture patterns, and exact technology versions by analyzing existing codebase patterns and avoiding assumptions.",
      "mode": "agent"
    },
    {
      "filename": "cosmosdb-datamodeling.prompt.md",
      "mode": "agent",
      "description": "Step-by-step guide for capturing key application requirements for NoSQL use-case and produce Azure Cosmos DB Data NoSQL Model design using best practices and common patterns, artifacts_produced: \"cosmosdb_requirements.md\" file and \"cosmosdb_data_model.md\" file",
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "create-agentsmd.prompt.md",
      "description": "Prompt for generating an AGENTS.md file for a repository",
      "mode": "agent"
    },
    {
      "filename": "create-architectural-decision-record.prompt.md",
      "mode": "agent",
      "description": "Create an Architectural Decision Record (ADR) document for AI-optimized decision documentation.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "create-github-action-workflow-specification.prompt.md",
      "mode": "agent",
      "description": "Create a formal specification for an existing GitHub Actions CI/CD workflow, optimized for AI consumption and workflow maintenance.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "new",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runInTerminal2",
        "runNotebooks",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI",
        "microsoft.docs.mcp",
        "github",
        "Microsoft Docs"
      ]
    },
    {
      "filename": "create-github-issue-feature-from-specification.prompt.md",
      "mode": "agent",
      "description": "Create GitHub Issue for feature request from specification file using feature_request.yml template.",
      "tools": [
        "codebase",
        "search",
        "github",
        "create_issue",
        "search_issues",
        "update_issue"
      ]
    },
    {
      "filename": "create-github-issues-feature-from-implementation-plan.prompt.md",
      "mode": "agent",
      "description": "Create GitHub Issues from implementation plan phases using feature_request.yml or chore_request.yml templates.",
      "tools": [
        "codebase",
        "search",
        "github",
        "create_issue",
        "search_issues",
        "update_issue"
      ]
    },
    {
      "filename": "create-github-issues-for-unmet-specification-requirements.prompt.md",
      "mode": "agent",
      "description": "Create GitHub Issues for unimplemented requirements from specification files using feature_request.yml template.",
      "tools": [
        "codebase",
        "search",
        "github",
        "create_issue",
        "search_issues",
        "update_issue"
      ]
    },
    {
      "filename": "create-github-pull-request-from-specification.prompt.md",
      "mode": "agent",
      "description": "Create GitHub Pull Request for feature request from specification file using pull_request_template.md template.",
      "tools": [
        "codebase",
        "search",
        "github",
        "create_pull_request",
        "update_pull_request",
        "get_pull_request_diff"
      ]
    },
    {
      "filename": "create-implementation-plan.prompt.md",
      "mode": "agent",
      "description": "Create a new implementation plan file for new features, refactoring existing code or upgrading packages, design, architecture or infrastructure.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "create-llms.prompt.md",
      "mode": "agent",
      "description": "Create an llms.txt file from scratch based on repository structure following the llms.txt specification at https://llmstxt.org/",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "create-oo-component-documentation.prompt.md",
      "mode": "agent",
      "description": "Create comprehensive, standardized documentation for object-oriented components following industry best practices and architectural documentation standards.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "create-readme.prompt.md",
      "mode": "agent",
      "description": "Create a README.md file for the project"
    },
    {
      "filename": "create-specification.prompt.md",
      "mode": "agent",
      "description": "Create a new specification file for the solution, optimized for Generative AI consumption.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "create-spring-boot-java-project.prompt.md",
      "mode": "agent",
      "description": "Create Spring Boot Java Project Skeleton"
    },
    {
      "filename": "create-spring-boot-kotlin-project.prompt.md",
      "mode": "agent",
      "description": "Create Spring Boot Kotlin Project Skeleton"
    },
    {
      "filename": "create-technical-spike.prompt.md",
      "mode": "agent",
      "description": "Create time-boxed technical spike documents for researching and resolving critical development decisions before implementation.",
      "tools": [
        "runCommands",
        "runTasks",
        "edit",
        "search",
        "extensions",
        "usages",
        "vscodeAPI",
        "think",
        "problems",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "Microsoft Docs",
        "search"
      ]
    },
    {
      "filename": "csharp-async.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Get best practices for C# async programming"
    },
    {
      "filename": "csharp-docs.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Ensure that C# types are documented with XML comments and follow best practices for documentation."
    },
    {
      "filename": "csharp-mstest.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for MSTest unit testing, including data-driven tests"
    },
    {
      "filename": "csharp-nunit.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for NUnit unit testing, including data-driven tests"
    },
    {
      "filename": "csharp-tunit.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for TUnit unit testing, including data-driven tests"
    },
    {
      "filename": "csharp-xunit.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for XUnit unit testing, including data-driven tests"
    },
    {
      "filename": "declarative-agents.prompt.md",
      "description": "Complete development kit for Microsoft 365 Copilot declarative agents with three comprehensive workflows (basic, advanced, validation), TypeSpec support, and Microsoft 365 Agents Toolkit integration"
    },
    {
      "filename": "documentation-writer.prompt.md",
      "mode": "agent",
      "tools": [
        "editFiles",
        "search",
        "fetch"
      ],
      "description": "Diátaxis Documentation Expert. An expert technical writer specializing in creating high-quality software documentation, guided by the principles and structure of the Diátaxis technical documentation authoring framework."
    },
    {
      "filename": "dotnet-best-practices.prompt.md",
      "mode": "agent",
      "description": "Ensure .NET/C# code meets best practices for the solution/project."
    },
    {
      "filename": "dotnet-design-pattern-review.prompt.md",
      "mode": "agent",
      "description": "Review the C#/.NET code for design pattern implementation and suggest improvements."
    },
    {
      "filename": "editorconfig.prompt.md",
      "title": "EditorConfig Expert",
      "description": "Generates a comprehensive and best-practice-oriented .editorconfig file based on project analysis and user preferences.",
      "mode": "agent"
    },
    {
      "filename": "ef-core.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "runCommands"
      ],
      "description": "Get best practices for Entity Framework Core"
    },
    {
      "filename": "first-ask.prompt.md",
      "description": "Interactive, input-tool powered, task refinement workflow: interrogates scope, deliverables, constraints before carrying out the task; Requires the Joyride extension."
    },
    {
      "filename": "folder-structure-blueprint-generator.prompt.md",
      "description": "Comprehensive technology-agnostic prompt for analyzing and documenting project folder structures. Auto-detects project types (.NET, Java, React, Angular, Python, Node.js, Flutter), generates detailed blueprints with visualization options, naming conventions, file placement patterns, and extension templates for maintaining consistent code organization across diverse technology stacks.",
      "mode": "agent"
    },
    {
      "filename": "gen-specs-as-issues.prompt.md",
      "description": "This workflow guides you through a systematic approach to identify missing features, prioritize them, and create detailed specifications for implementation.",
      "mode": "agent"
    },
    {
      "filename": "generate-custom-instructions-from-codebase.prompt.md",
      "description": "Migration and code evolution instructions generator for GitHub Copilot. Analyzes differences between two project versions (branches, commits, or releases) to create precise instructions allowing Copilot to maintain consistency during technology migrations, major refactoring, or framework version upgrades.",
      "mode": "agent"
    },
    {
      "filename": "git-flow-branch-creator.prompt.md",
      "description": "Intelligent Git Flow branch creator that analyzes git status/diff and creates appropriate branches following the nvie Git Flow branching model.",
      "tools": [
        "run_in_terminal",
        "get_terminal_output"
      ],
      "mode": "agent"
    },
    {
      "filename": "github-copilot-starter.prompt.md",
      "mode": "agent",
      "model": "Claude Sonnet 4",
      "tools": [
        "edit",
        "githubRepo",
        "changes",
        "problems",
        "search",
        "runCommands",
        "fetch"
      ],
      "description": "Set up complete GitHub Copilot configuration for a new project based on technology stack"
    },
    {
      "filename": "java-docs.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Ensure that Java types are documented with Javadoc comments and follow best practices for documentation."
    },
    {
      "filename": "java-junit.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for JUnit 5 unit testing, including data-driven tests"
    },
    {
      "filename": "java-springboot.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for developing applications with Spring Boot."
    },
    {
      "filename": "javascript-typescript-jest.prompt.md",
      "description": "Best practices for writing JavaScript/TypeScript tests using Jest, including mocking strategies, test structure, and common patterns.",
      "mode": "agent"
    },
    {
      "filename": "kotlin-springboot.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "description": "Get best practices for developing applications with Spring Boot and Kotlin."
    },
    {
      "filename": "mkdocs-translations.prompt.md",
      "mode": "agent",
      "description": "Generate a language translation for a mkdocs documentation stack.",
      "tools": [
        "codebase",
        "usages",
        "problems",
        "changes",
        "terminalSelection",
        "terminalLastCommand",
        "searchResults",
        "extensions",
        "editFiles",
        "search",
        "runCommands",
        "runTasks"
      ],
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "multi-stage-dockerfile.prompt.md",
      "mode": "agent",
      "tools": [
        "codebase"
      ],
      "description": "Create optimized multi-stage Dockerfiles for any language or framework"
    },
    {
      "filename": "my-issues.prompt.md",
      "mode": "agent",
      "tools": [
        "githubRepo",
        "github",
        "get_issue",
        "get_issue_comments",
        "get_me",
        "list_issues"
      ],
      "description": "List my issues in the current repository"
    },
    {
      "filename": "my-pull-requests.prompt.md",
      "mode": "agent",
      "tools": [
        "githubRepo",
        "github",
        "get_me",
        "get_pull_request",
        "get_pull_request_comments",
        "get_pull_request_diff",
        "get_pull_request_files",
        "get_pull_request_reviews",
        "get_pull_request_status",
        "list_pull_requests",
        "request_copilot_review"
      ],
      "description": "List my pull requests in the current repository"
    },
    {
      "filename": "next-intl-add-language.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "findTestFiles",
        "search",
        "writeTest"
      ],
      "description": "Add new language to a Next.js + next-intl application"
    },
    {
      "filename": "playwright-automation-fill-in-form.prompt.md",
      "description": "Automate filling in a form using Playwright MCP",
      "mode": "agent",
      "tools": [
        "playwright"
      ],
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "playwright-explore-website.prompt.md",
      "mode": "agent",
      "description": "Website exploration for testing using Playwright MCP",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "fetch",
        "findTestFiles",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "playwright"
      ],
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "playwright-generate-test.prompt.md",
      "mode": "agent",
      "description": "Generate a Playwright test based on a scenario using Playwright MCP",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "fetch",
        "findTestFiles",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "playwright"
      ],
      "model": "Claude Sonnet 4"
    },
    {
      "filename": "postgresql-code-review.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "PostgreSQL-specific code review assistant focusing on PostgreSQL best practices, anti-patterns, and unique quality standards. Covers JSONB operations, array usage, custom types, schema design, function optimization, and PostgreSQL-exclusive security features like Row Level Security (RLS).",
      "tested_with": "GitHub Copilot Chat (GPT-4o) - Validated July 20, 2025"
    },
    {
      "filename": "postgresql-optimization.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "PostgreSQL-specific development assistant focusing on unique PostgreSQL features, advanced data types, and PostgreSQL-exclusive capabilities. Covers JSONB operations, array types, custom types, range/geometric types, full-text search, window functions, and PostgreSQL extensions ecosystem.",
      "tested_with": "GitHub Copilot Chat (GPT-4o) - Validated July 20, 2025"
    },
    {
      "filename": "power-apps-code-app-scaffold.prompt.md",
      "description": "Scaffold a complete Power Apps Code App project with PAC CLI setup, SDK integration, and connector configuration",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems",
        "search"
      ],
      "model": "GPT-4.1"
    },
    {
      "filename": "project-workflow-analysis-blueprint-generator.prompt.md",
      "description": "Comprehensive technology-agnostic prompt generator for documenting end-to-end application workflows. Automatically detects project architecture patterns, technology stacks, and data flow patterns to generate detailed implementation blueprints covering entry points, service layers, data access, error handling, and testing approaches across multiple technologies including .NET, Java/Spring, React, and microservices architectures.",
      "mode": "agent"
    },
    {
      "filename": "prompt-builder.prompt.md",
      "mode": "agent",
      "tools": [
        "codebase",
        "editFiles",
        "search"
      ],
      "description": "Guide users through creating high-quality GitHub Copilot prompts with proper structure, tools, and best practices."
    },
    {
      "filename": "readme-blueprint-generator.prompt.md",
      "description": "Intelligent README.md generation prompt that analyzes project documentation structure and creates comprehensive repository documentation. Scans .github/copilot directory files and copilot-instructions.md to extract project information, technology stack, architecture, development workflow, coding standards, and testing approaches while generating well-structured markdown documentation with proper formatting, cross-references, and developer-focused content.",
      "mode": "agent"
    },
    {
      "filename": "remember-interactive-programming.prompt.md",
      "description": "A micro-prompt that reminds the agent that it is an interactive programmer. Works great in Clojure when Copilot has access to the REPL (probably via Backseat Driver). Will work with any system that has a live REPL that the agent can use. Adapt the prompt with any specific reminders in your workflow and/or workspace.",
      "title": "Interactive Programming Nudge"
    },
    {
      "filename": "remember.prompt.md",
      "description": "Contemplates repeated mistakes and success patterns, and transforms lessons learned into domain-organized Copilot instructions. Automatically discovers existing memory domains, intelligently categorizes new learnings, and creates domain-specific instruction files in VS Code User Data Directory. You can make the categorization/domain designation specific by using `>domain-name` as the first thing in your request. Like so: `/remember >domain-name lesson content here`"
    },
    {
      "filename": "repo-story-time.prompt.md",
      "mode": "agent",
      "description": "Generate a comprehensive repository summary and narrative story from commit history",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "githubRepo",
        "runCommands",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection"
      ]
    },
    {
      "filename": "review-and-refactor.prompt.md",
      "mode": "agent",
      "description": "Review and refactor code in your project according to defined instructions"
    },
    {
      "filename": "sql-code-review.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Universal SQL code review assistant that performs comprehensive security, maintainability, and code quality analysis across all SQL databases (MySQL, PostgreSQL, SQL Server, Oracle). Focuses on SQL injection prevention, access control, code standards, and anti-pattern detection. Complements SQL optimization prompt for complete development coverage.",
      "tested_with": "GitHub Copilot Chat (GPT-4o) - Validated July 20, 2025"
    },
    {
      "filename": "sql-optimization.prompt.md",
      "mode": "agent",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "problems"
      ],
      "description": "Universal SQL performance optimization assistant for comprehensive query tuning, indexing strategies, and database performance analysis across all SQL databases (MySQL, PostgreSQL, SQL Server, Oracle). Provides execution plan analysis, pagination optimization, batch operations, and performance monitoring guidance.",
      "tested_with": "GitHub Copilot Chat (GPT-4o) - Validated July 20, 2025"
    },
    {
      "filename": "suggest-awesome-github-copilot-chatmodes.prompt.md",
      "mode": "agent",
      "description": "Suggest relevant GitHub Copilot Custom Chat Modes files from the awesome-copilot repository based on current repository context and chat history, avoiding duplicates with existing custom chat modes in this repository.",
      "tools": [
        "edit",
        "search",
        "runCommands",
        "runTasks",
        "think",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "search"
      ]
    },
    {
      "filename": "suggest-awesome-github-copilot-collections.prompt.md",
      "mode": "agent",
      "description": "Suggest relevant GitHub Copilot collections from the awesome-copilot repository based on current repository context and chat history, providing automatic download and installation of collection assets.",
      "tools": [
        "edit",
        "search",
        "runCommands",
        "runTasks",
        "think",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "search"
      ]
    },
    {
      "filename": "suggest-awesome-github-copilot-instructions.prompt.md",
      "mode": "agent",
      "description": "Suggest relevant GitHub Copilot instruction files from the awesome-copilot repository based on current repository context and chat history, avoiding duplicates with existing instructions in this repository.",
      "tools": [
        "edit",
        "search",
        "runCommands",
        "runTasks",
        "think",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "search"
      ]
    },
    {
      "filename": "suggest-awesome-github-copilot-prompts.prompt.md",
      "mode": "agent",
      "description": "Suggest relevant GitHub Copilot prompt files from the awesome-copilot repository based on current repository context and chat history, avoiding duplicates with existing prompts in this repository.",
      "tools": [
        "edit",
        "search",
        "runCommands",
        "runTasks",
        "think",
        "changes",
        "testFailure",
        "openSimpleBrowser",
        "fetch",
        "githubRepo",
        "todos",
        "search"
      ]
    },
    {
      "filename": "technology-stack-blueprint-generator.prompt.md",
      "description": "Comprehensive technology stack blueprint generator that analyzes codebases to create detailed architectural documentation. Automatically detects technology stacks, programming languages, and implementation patterns across multiple platforms (.NET, Java, JavaScript, React, Python). Generates configurable blueprints with version information, licensing details, usage patterns, coding conventions, and visual diagrams. Provides implementation-ready templates and maintains architectural consistency for guided development.",
      "mode": "agent"
    },
    {
      "filename": "update-avm-modules-in-bicep.prompt.md",
      "mode": "agent",
      "description": "Update Azure Verified Modules (AVM) to latest versions in Bicep files.",
      "tools": [
        "codebase",
        "think",
        "changes",
        "fetch",
        "searchResults",
        "todos",
        "editFiles",
        "search",
        "runCommands",
        "bicepschema",
        "azure_get_schema_for_Bicep"
      ]
    },
    {
      "filename": "update-implementation-plan.prompt.md",
      "mode": "agent",
      "description": "Update an existing implementation plan file with new or update requirements to provide new features, refactoring existing code or upgrading packages, design, architecture or infrastructure.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "update-llms.prompt.md",
      "mode": "agent",
      "description": "Update the llms.txt file in the root folder to reflect changes in documentation or specifications following the llms.txt specification at https://llmstxt.org/",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "update-markdown-file-index.prompt.md",
      "mode": "agent",
      "description": "Update a markdown file section with an index/table of files from a specified folder.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "findTestFiles",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runCommands",
        "runTasks",
        "runTests",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "update-oo-component-documentation.prompt.md",
      "mode": "agent",
      "description": "Update existing object-oriented component documentation following industry best practices and architectural documentation standards.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    },
    {
      "filename": "update-specification.prompt.md",
      "mode": "agent",
      "description": "Update an existing specification file for the solution, optimized for Generative AI consumption based on new requirements or updates to any existing code.",
      "tools": [
        "changes",
        "codebase",
        "editFiles",
        "extensions",
        "fetch",
        "githubRepo",
        "openSimpleBrowser",
        "problems",
        "runTasks",
        "search",
        "searchResults",
        "terminalLastCommand",
        "terminalSelection",
        "testFailure",
        "usages",
        "vscodeAPI"
      ]
    }
  ],
  "collections": [
    {
      "filename": "azure-cloud-development.collection.yml",
      "id": "azure-cloud-development",
      "name": "Azure & Cloud Development",
      "description": "Comprehensive Azure cloud development tools including Infrastructure as Code, serverless functions, architecture patterns, and cost optimization for building scalable cloud applications.",
      "tags": [
        "azure",
        "cloud",
        "infrastructure",
        "bicep",
        "terraform",
        "serverless",
        "architecture",
        "devops"
      ],
      "items": [
        {
          "path": "chatmodes/azure-principal-architect.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/azure-saas-architect.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/azure-logic-apps-expert.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/azure-verified-modules-bicep.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/azure-verified-modules-terraform.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/terraform-azure-planning.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/terraform-azure-implement.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "instructions/bicep-code-best-practices.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/terraform.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/terraform-azure.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/azure-verified-modules-terraform.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/azure-functions-typescript.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/azure-logic-apps-power-automate.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/azure-devops-pipelines.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/containerization-docker-best-practices.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/kubernetes-deployment-best-practices.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/azure-resource-health-diagnose.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/az-cost-optimize.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "clojure-interactive-programming.collection.yml",
      "id": "clojure-interactive-programming",
      "name": "Clojure Interactive Programming",
      "description": "Tools for REPL-first Clojure workflows featuring Clojure instructions, the interactive programming chat mode and supporting guidance.",
      "tags": [
        "clojure",
        "repl",
        "interactive-programming"
      ],
      "items": [
        {
          "path": "instructions/clojure.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "chatmodes/clojure-interactive-programming.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "prompts/remember-interactive-programming.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "csharp-dotnet-development.collection.yml",
      "id": "csharp-dotnet-development",
      "name": "C# .NET Development",
      "description": "Essential prompts, instructions, and chat modes for C# and .NET development including testing, documentation, and best practices.",
      "tags": [
        "csharp",
        "dotnet",
        "aspnet",
        "testing"
      ],
      "items": [
        {
          "path": "prompts/csharp-async.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/aspnet-minimal-api-openapi.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "instructions/csharp.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/dotnet-architecture-good-practices.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "chatmodes/expert-dotnet-software-engineer.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "prompts/csharp-xunit.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/dotnet-best-practices.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "database-data-management.collection.yml",
      "id": "database-data-management",
      "name": "Database & Data Management",
      "description": "Database administration, SQL optimization, and data management tools for PostgreSQL, SQL Server, and general database development best practices.",
      "tags": [
        "database",
        "sql",
        "postgresql",
        "sql-server",
        "dba",
        "optimization",
        "queries",
        "data-management"
      ],
      "items": [
        {
          "path": "chatmodes/postgresql-dba.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/ms-sql-dba.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "instructions/ms-sql-dba.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/sql-sp-generation.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/sql-optimization.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/sql-code-review.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/postgresql-optimization.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/postgresql-code-review.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "devops-oncall.collection.yml",
      "id": "devops-oncall",
      "name": "DevOps On-Call",
      "description": "A focused set of prompts, instructions, and a chat mode to help triage incidents and respond quickly with DevOps tools and Azure resources.",
      "tags": [
        "devops",
        "incident-response",
        "oncall",
        "azure"
      ],
      "items": [
        {
          "path": "prompts/azure-resource-health-diagnose.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "instructions/devops-core-principles.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/containerization-docker-best-practices.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "chatmodes/azure-principal-architect.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "prompts/multi-stage-dockerfile.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "edge-ai-tasks.collection.yml",
      "id": "edge-ai-tasks",
      "name": "Tasks by microsoft/edge-ai",
      "description": "Task Researcher and Task Planner for intermediate to expert users and large codebases - Brought to you by microsoft/edge-ai",
      "tags": [
        "architecture",
        "planning",
        "research",
        "tasks",
        "implementation"
      ],
      "items": [
        {
          "path": "chatmodes/task-researcher.chatmode.md",
          "kind": "chat-mode",
          "usage": "Now you can iterate on research for your tasks!\n\n```markdown, research.prompt.md\n---\nmode: task-researcher\ntitle: Research microsoft fabric realtime intelligence terraform support\n---\nReview the microsoft documentation for fabric realtime intelligence\nand come up with ideas on how to implement this support into our terraform components.\n```\n\nResearch is dumped out into a .copilot-tracking/research/*-research.md file and will include discoveries for GHCP along with examples and schema that will be useful during implementation.\n\nAlso, task-researcher will provide additional ideas for implementation which you can work with GitHub Copilot on selecting the right one to focus on."
        },
        {
          "path": "chatmodes/task-planner.chatmode.md",
          "kind": "chat-mode",
          "usage": "Also, task-researcher will provide additional ideas for implementation which you can work with GitHub Copilot on selecting the right one to focus on.\n\n```markdown, task-plan.prompt.md\n---\nmode: task-planner\ntitle: Plan microsoft fabric realtime intelligence terraform support\n---\nBuild a plan to support adding fabric rti to this project\n```\n\n`task-planner` will help you create a plan for implementing your task(s). It will use your fully researched ideas or build new research if not already provided.\n\n`task-planner` will produce three (3) files that will be used by `task-implementation.instructions.md`.\n\n* `.copilot-tracking/plan/*-plan.instructions.md`\n\n  * A newly generated instructions file that has the plan as a checklist of Phases and Tasks.\n* `.copilot-tracking/details/*-details.md`\n\n  * The details for the implementation, the plan file refers to this file for specific details (important if you have a big plan).\n* `.copilot-tracking/prompts/implement-*.prompt.md`\n\n  * A newly generated prompt file that will create a `.copilot-tracking/changes/*-changes.md` file and proceed to implement the changes.\n\nContinue to use `task-planner` to iterate on the plan until you have exactly what you want done to your codebase."
        },
        {
          "path": "instructions/task-implementation.instructions.md",
          "kind": "instruction",
          "usage": "Continue to use `task-planner` to iterate on the plan until you have exactly what you want done to your codebase.\n\nWhen you are ready to implement the plan, **create a new chat** and switch to `Agent` mode then fire off the newly generated prompt.\n\n```markdown, implement-fabric-rti-changes.prompt.md\n---\nmode: agent\ntitle: Implement microsoft fabric realtime intelligence terraform support\n---\n/implement-fabric-rti-blueprint-modification phaseStop=true\n```\n\nThis prompt has the added benefit of attaching the plan as instructions, which helps with keeping the plan in context throughout the whole conversation.\n\n**Expert Warning** ->>Use `phaseStop=false` to have Copilot implement the whole plan without stopping. Additionally, you can use `taskStop=true` to have Copilot stop after every Task implementation for finer detail control.\n\nTo use these generated instructions and prompts, you'll need to update your `settings.json` accordingly:\n\n```json\n    \"chat.instructionsFilesLocations\": {\n        // Existing instructions folders...\n        \".copilot-tracking/plans\": true\n    },\n    \"chat.promptFilesLocations\": {\n        // Existing prompts folders...\n        \".copilot-tracking/prompts\": true\n    },\n```"
        }
      ],
      "display": {}
    },
    {
      "filename": "frontend-web-dev.collection.yml",
      "id": "frontend-web-dev",
      "name": "Frontend Web Development",
      "description": "Essential prompts, instructions, and chat modes for modern frontend web development including React, Angular, Vue, TypeScript, and CSS frameworks.",
      "tags": [
        "frontend",
        "web",
        "react",
        "typescript",
        "javascript",
        "css",
        "html",
        "angular",
        "vue"
      ],
      "items": [
        {
          "path": "chatmodes/expert-react-frontend-engineer.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/electron-angular-native.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "instructions/reactjs.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/angular.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/vuejs3.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/nextjs.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/nextjs-tailwind.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/tanstack-start-shadcn-tailwind.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/nodejs-javascript-vitest.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/playwright-explore-website.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/playwright-generate-test.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "java-development.collection.yml",
      "id": "java-development",
      "name": "Java Development",
      "description": "Comprehensive collection of prompts and instructions for Java development including Spring Boot, Quarkus, testing, documentation, and best practices.",
      "tags": [
        "java",
        "springboot",
        "quarkus",
        "jpa",
        "junit",
        "javadoc"
      ],
      "items": [
        {
          "path": "instructions/java.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/springboot.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/quarkus.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/quarkus-mcp-server-sse.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/convert-jpa-to-spring-data-cosmos.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/java-11-to-java-17-upgrade.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/java-17-to-java-21-upgrade.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/java-21-to-java-25-upgrade.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/java-docs.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/java-junit.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/java-springboot.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/create-spring-boot-java-project.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "power-apps-code-apps.collection.yml",
      "id": "power-apps-code-apps",
      "name": "Power Apps Code Apps Development",
      "description": "Complete toolkit for Power Apps Code Apps development including project scaffolding, development standards, and expert guidance for building code-first applications with Power Platform integration.",
      "tags": [
        "power-apps",
        "power-platform",
        "typescript",
        "react",
        "code-apps",
        "dataverse",
        "connectors"
      ],
      "items": [
        {
          "path": "prompts/power-apps-code-app-scaffold.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "instructions/power-apps-code-apps.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "chatmodes/power-platform-expert.chatmode.md",
          "kind": "chat-mode"
        }
      ],
      "display": {}
    },
    {
      "filename": "project-planning.collection.yml",
      "id": "project-planning",
      "name": "Project Planning & Management",
      "description": "Tools and guidance for software project planning, feature breakdown, epic management, implementation planning, and task organization for development teams.",
      "tags": [
        "planning",
        "project-management",
        "epic",
        "feature",
        "implementation",
        "task",
        "architecture",
        "technical-spike"
      ],
      "items": [
        {
          "path": "chatmodes/task-planner.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/task-researcher.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/planner.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/plan.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/prd.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/implementation-plan.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/research-technical-spike.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "instructions/task-implementation.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/spec-driven-workflow-v1.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/breakdown-feature-implementation.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/breakdown-feature-prd.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/breakdown-epic-arch.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/breakdown-epic-pm.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/create-implementation-plan.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/update-implementation-plan.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/create-github-issues-feature-from-implementation-plan.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/create-technical-spike.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "security-best-practices.collection.yml",
      "id": "security-best-practices",
      "name": "Security & Code Quality",
      "description": "Security frameworks, accessibility guidelines, performance optimization, and code quality best practices for building secure, maintainable, and high-performance applications.",
      "tags": [
        "security",
        "accessibility",
        "performance",
        "code-quality",
        "owasp",
        "a11y",
        "optimization",
        "best-practices"
      ],
      "items": [
        {
          "path": "instructions/security-and-owasp.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/a11y.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/performance-optimization.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/object-calisthenics.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/self-explanatory-code-commenting.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/ai-prompt-engineering-safety-review.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "technical-spike.collection.yml",
      "id": "technical-spike",
      "name": "Technical Spike",
      "description": "Tools for creation, management and research of technical spikes to reduce unknowns and assumptions before proceeding to specification and implementation of solutions.",
      "tags": [
        "technical-spike",
        "assumption-testing",
        "validation",
        "research"
      ],
      "items": [
        {
          "path": "chatmodes/research-technical-spike.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "prompts/create-technical-spike.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    },
    {
      "filename": "testing-automation.collection.yml",
      "id": "testing-automation",
      "name": "Testing & Test Automation",
      "description": "Comprehensive collection for writing tests, test automation, and test-driven development including unit tests, integration tests, and end-to-end testing strategies.",
      "tags": [
        "testing",
        "tdd",
        "automation",
        "unit-tests",
        "integration",
        "playwright",
        "jest",
        "nunit"
      ],
      "items": [
        {
          "path": "chatmodes/tdd-red.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/tdd-green.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/tdd-refactor.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "chatmodes/playwright-tester.chatmode.md",
          "kind": "chat-mode"
        },
        {
          "path": "instructions/playwright-typescript.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "instructions/playwright-python.instructions.md",
          "kind": "instruction"
        },
        {
          "path": "prompts/playwright-explore-website.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/playwright-generate-test.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/csharp-nunit.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/java-junit.prompt.md",
          "kind": "prompt"
        },
        {
          "path": "prompts/ai-prompt-engineering-safety-review.prompt.md",
          "kind": "prompt"
        }
      ],
      "display": {}
    }
  ]
}